// Copyright 2017 The Forseti Security Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

service ActionEngine {
  rpc Ping(PingRequest) returns (PingReply) {
  }

  rpc List(ListRequest) returns (ListResponse) {
  }

  rpc ProcessResults(ProcessResultsRequest)
      returns (stream ProcessResultsResponse) {
  }
}

message PingRequest {
  string data = 1;
}

message PingReply {
  string data = 1;
}

message ListRequest {
}

message Action {
  string action_id = 1;
  enum ActionType {
    BaseAction = 0;
    SampleAction = 1;
  }
  ActionType type = 2;
  repeated string triggers = 3;
  // The string representation of the configuration.
  string config = 4;
}

message ListResponse {
  repeated Action actions = 1;
}

message RuleResult {
  // The id of the rule, must be unique
  string rule_id = 1;
  // The resource that this rule affects.
  string resource = 2;
  // The current state of the resource in json string format.
  string current_state = 3;
  // The expected state of the resource in json string format.
  string expected_state = 4;
  // The timestamp that for when the resource was updated that triggered this
  // check.
  google.protobuf.Timestamp timestamp = 5;
  // A human readable string output of what this result says.
  string info = 6;
}

message ProcessResultsRequest {
  repeated RuleResult results = 1;
}

message ActionResult {
  enum Code {
    SUCCESS = 0;
    ERROR = 1;
    NOT_PROCESSED = 2;  // Used if no actions processed the result.
  }
  Code code = 1;
  string action_id = 2;
  string info = 3;
}

message ProcessedResult {
  RuleResult result = 1;
  repeated ActionResult action_results = 2;
}

message ProcessResultsResponse {
  repeated ProcessedResult processed_results = 1;
}
