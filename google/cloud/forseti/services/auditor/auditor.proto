// Copyright 2017 The Forseti Security Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/cloud/forseti/services/actions/action_engine.proto";

package google.cloud.forseti.services.auditor;

service Auditor {
  rpc Ping(PingRequest) returns (PingReply) {}

  rpc List(ListRequest) returns (stream AuditIndex) {}

  rpc Run(RunRequest) returns (RunReply) {}

  rpc GetResults(GetResultsRequest) returns
    (stream google.cloud.forseti.services.actions.RuleResult) {}

  rpc Delete(DeleteRequest) returns (DeleteReply) {}
}

message PingRequest {
  string data = 1;
}

message PingReply {
  string data = 1;
}

message ListRequest {
}

message AuditIndex {
  // The audit id.
  int32 id = 1;
  // The start time of the audit.
  google.protobuf.Timestamp start_time = 2;
  // The completion time of the audit.
  google.protobuf.Timestamp complete_time = 3;
  // The status of the audit.
  enum Status {
    RUNNING = 0;
    ERROR = 1;
    SUCCESS = 2;
  }
  Status status = 4;
  // The model data (json) associated with the model
  // that the audit ran on.
  string model = 5;
  // Stores messages from the audit.
  string messages = 6;
}

message AuditRule {
  // The audit id.
  int32 id = 1;
  // The rule id from the rules file.
  string rule_id = 2;
  // The hash of the rule properties.
  string rule_hash = 3;
  // The properties of the rule.
  string properties = 4;
}

message RunRequest {
	string config_path = 1;
  string model_handle = 2;
}

message RunReply {
	int32 status = 1;
}

message GetResultsRequest {
  int32 id = 1;
}

message DeleteRequest {
  int32 id = 1;
}

message DeleteReply {
  AuditIndex audit = 1;
}
