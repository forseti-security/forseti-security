# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import validator_pb2 as validator__pb2


class ValidatorStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddData = channel.unary_unary(
                '/validator.Validator/AddData',
                request_serializer=validator__pb2.AddDataRequest.SerializeToString,
                response_deserializer=validator__pb2.AddDataResponse.FromString,
                )
        self.Audit = channel.unary_unary(
                '/validator.Validator/Audit',
                request_serializer=validator__pb2.AuditRequest.SerializeToString,
                response_deserializer=validator__pb2.AuditResponse.FromString,
                )
        self.Reset = channel.unary_unary(
                '/validator.Validator/Reset',
                request_serializer=validator__pb2.ResetRequest.SerializeToString,
                response_deserializer=validator__pb2.ResetResponse.FromString,
                )
        self.Review = channel.unary_unary(
                '/validator.Validator/Review',
                request_serializer=validator__pb2.ReviewRequest.SerializeToString,
                response_deserializer=validator__pb2.ReviewResponse.FromString,
                )


class ValidatorServicer(object):
    """Missing associated documentation comment in .proto file"""

    def AddData(self, request, context):
        """AddData adds GCP resource metadata to be audited later.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Audit(self, request, context):
        """Audit checks the GCP resource metadata that has been added via AddData to determine if any of the constraint is violated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Reset clears previously added data from the underlying query evaluation engine.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Review(self, request, context):
        """Review checks the GCP resources and returns any constraint violations.  Note that referential checks are not supported
        with this mode.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ValidatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddData': grpc.unary_unary_rpc_method_handler(
                    servicer.AddData,
                    request_deserializer=validator__pb2.AddDataRequest.FromString,
                    response_serializer=validator__pb2.AddDataResponse.SerializeToString,
            ),
            'Audit': grpc.unary_unary_rpc_method_handler(
                    servicer.Audit,
                    request_deserializer=validator__pb2.AuditRequest.FromString,
                    response_serializer=validator__pb2.AuditResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=validator__pb2.ResetRequest.FromString,
                    response_serializer=validator__pb2.ResetResponse.SerializeToString,
            ),
            'Review': grpc.unary_unary_rpc_method_handler(
                    servicer.Review,
                    request_deserializer=validator__pb2.ReviewRequest.FromString,
                    response_serializer=validator__pb2.ReviewResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'validator.Validator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Validator(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def AddData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/validator.Validator/AddData',
            validator__pb2.AddDataRequest.SerializeToString,
            validator__pb2.AddDataResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Audit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/validator.Validator/Audit',
            validator__pb2.AuditRequest.SerializeToString,
            validator__pb2.AuditResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/validator.Validator/Reset',
            validator__pb2.ResetRequest.SerializeToString,
            validator__pb2.ResetResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Review(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/validator.Validator/Review',
            validator__pb2.ReviewRequest.SerializeToString,
            validator__pb2.ReviewResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
